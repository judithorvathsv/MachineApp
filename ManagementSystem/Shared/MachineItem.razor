
<div class="form-group row">
    <input type="text" class="form-control col-sm-4" @bind="@Name" placeholder="Add name..." autofocus>
    <label class="col-sm-1 col-form-label" type="text" style="font-weight:bold">Status:</label>
    <div class="col-sm-2">
        @(Status == false)
        { <label type="text" readonly class="form-control-plaintext">Offline</label>}
    </div>
</div>


<div class="form-group row">
    <label class="col-sm-4 col-form-label" type="text">@Id</label>
    <label class="col-sm-1 col-form-label" type="text" style="font-weight:bold">Data:</label>
    <div class="col-sm-6">
        <input type="text" class="form-control-plaintext" @bind="@SentData" placeholder="Add data..." autofocus>
    </div>
</div>

@*<button @onclick="OnAdd" @onclick:preventDefault="true" id="addItemBtn" class="btn btn-info">ADD</button>*@



@code {

    public string Id { get; set; }

    public string Name { get; set; }

    public bool Status { get; set; }

    public string SentData { get; set; }

    public TempDTO tempDTO;


    [Parameter]
    public EventCallback<TempDTO> Add { get; set; }

    public async Task OnAdd()
    {
        if (Add.HasDelegate)
        {
           tempDTO.Name = Name;
           tempDTO.Status = Status; 
           tempDTO.SentData = SentData;

            await Add.InvokeAsync(tempDTO);
        }
        Name = default;
        Status=default;
        SentData=default;
    }






}




    @*@public class EventCallback()
        {

    public string ThisName { get; set; }
    public bool ThisStatus { get; set; }
    public string ThisSentData { get; set; }

    public async Task OnAdd()
    {
    await MachineItem.InvokeAsync(ThisName, ThisStatus, ThisSentData);
    }*@
}